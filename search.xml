<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解二分查找</title>
      <link href="/uncategorized/%E7%90%86%E8%A7%A3%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE"/>
      <url>/uncategorized/%E7%90%86%E8%A7%A3%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="深入理解二分查找"><a href="#深入理解二分查找" class="headerlink" title="深入理解二分查找"></a>深入理解二分查找</h1><h2 id="何为二分查找法"><a href="#何为二分查找法" class="headerlink" title="何为二分查找法"></a>何为二分查找法</h2><p>以下来自Wiki</p><blockquote><p>在计算机科学中，<strong>二分搜索</strong>（英语：binary search），也称<strong>折半搜索</strong>（英语：half-interval search、<strong>对数搜索</strong>（英语：logarithmic search，是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p></blockquote><h2 id="二分查找法的使用"><a href="#二分查找法的使用" class="headerlink" title="二分查找法的使用"></a>二分查找法的使用</h2><p>计算机世界里,快速查找是一个非常重要的话题，二分查找作为基础且重要的查找方法，值得深入学习。</p><p>使用二分查找的要点：</p><ul><li>时间复杂度：$O(log~n)$，原因在于每次把搜索区域减少一半</li><li>空间复杂度：$O(1)$</li><li>使用条件：有序数组</li></ul><h2 id="C-中的二分查找法"><a href="#C-中的二分查找法" class="headerlink" title="C++中的二分查找法"></a>C++中的二分查找法</h2><p>头文件： #include <algorithm></algorithm></p><p>主要使用的两个函数：</p><ul><li>lower_bound(first, last, key)</li><li>upper_bound(first, last, key)</li></ul><p>要说明的是，在有关数组界限中，一般使用左闭右开的原则，即(,]</p><h3 id="左闭右开原则"><a href="#左闭右开原则" class="headerlink" title="左闭右开原则"></a>左闭右开原则</h3><p>大多数有关界限的问题，计算机世界中大多会使用左闭右开的原则，其原因归结于下：</p><ol><li>上下界之差为元素个数</li><li>易于表现两个相邻区间，前一区间的下界，即为后一区间的上界</li><li>易于表达空集，上界不会大于下界</li></ol><h3 id="lower-bound返回值说明"><a href="#lower-bound返回值说明" class="headerlink" title="lower_bound返回值说明"></a>lower_bound返回值说明</h3><p><img src="../pict/lower_bound%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="lower_bound函数返回值.png"></p><p>lower_bound返回值ret与key的关系:</p><p>$ret \ge key$</p><h3 id="upper-bound返回值说明"><a href="#upper-bound返回值说明" class="headerlink" title="upper_bound返回值说明"></a>upper_bound返回值说明</h3><p><img src="../pict/upper_bound%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="upper_bound函数返回值.png"></p><p>lower_bound返回值ret与key的关系:</p><p>$ret \gt key$</p><h2 id="使用Python实现lower-bound"><a href="#使用Python实现lower-bound" class="headerlink" title="使用Python实现lower_bound()"></a>使用Python实现lower_bound()</h2><h3 id="丑陋实现"><a href="#丑陋实现" class="headerlink" title="丑陋实现"></a>丑陋实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_bound</span><span class="params">(sublist, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    二分查找</span></span><br><span class="line"><span class="string">    :param sublist: 有序序列</span></span><br><span class="line"><span class="string">    :param key:  需要查找的值</span></span><br><span class="line"><span class="string">    :return: &gt;= key</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(sublist)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:  <span class="comment"># 根据左闭右开原则, l &lt; r 表示还有区域可搜索</span></span><br><span class="line">        <span class="comment"># m = (l + r) // 2 存在溢出可能</span></span><br><span class="line">        m = l + (r - l) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 若搜索区域为偶数,则m中间靠右,即偏大</span></span><br><span class="line">        <span class="comment"># 若搜索区域为奇数,则m中间</span></span><br><span class="line">        <span class="keyword">if</span> sublist[m] &gt; key:</span><br><span class="line">            <span class="comment"># key在sublist[m]的左侧</span></span><br><span class="line">            r = m</span><br><span class="line">        <span class="keyword">elif</span> sublist[m] &lt; key:</span><br><span class="line">            <span class="comment"># key 在sublist[m]的右侧</span></span><br><span class="line">            l = m + <span class="number">1</span>  <span class="comment"># 左闭右开区间, m索引已经考虑,不符合,即不在搜索区域内</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 相等下,遍历左侧搜索区域,该步骤可能会提高时间复杂度</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m - <span class="number">1</span>, l - <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> sublist[i] != key:</span><br><span class="line">                    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 出循环条件 l == r, 意味没有找到</span></span><br><span class="line">    <span class="keyword">if</span> l &lt; len(sublist) <span class="keyword">and</span> sublist[l] &lt; key:</span><br><span class="line">        l += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><h3 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h3><p>以上的实现,是最直观的实现方法,但非常冗长.</p><p>关键点:</p><ol><li>如果key在数组中大量重复,会严重降低算法复杂度</li><li>最后返回值处理并不优雅,没有充分考虑到各种每次所选择的中间值(偶数情况)带来的问题</li></ol><p><em>关键点1的解决：</em></p><p><strong>应该依旧使用二分查找在剩下的区域中查找，从而避免算法退化</strong></p><p><em>关键点2的解决：</em></p><p>考虑一种情况,key值不在数组中.</p><p>如果进行二分搜索,搜索范围应该是:</p><p>…-&gt;4-&gt;2-&gt;1</p><p>考虑4个元素情况下的一些情形（未列举完全）:</p><p>如图所示,黄色为本次循环的middle值,即所考察的值。<br>而红色为key本该在的位置，箭头为最终指向的返回值。</p><p><img src="../pict/%E6%AF%8F%E6%AC%A1%E5%80%BC%E7%9A%84%E9%80%89%E6%8B%A9.png" alt="image"></p><p>通过图发现，每次返回的值与key的大小关系不固定。</p><p>而最终返回值期望是大于或等于key的值。</p><p><strong>原因在于：如果为偶数元素个数情况下，small，(middle)， big，在这次循环中，会选择big，从而导致大值被排除，剩下较小值，不满足返回条件</strong></p><p>综上，代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_bound</span><span class="params">(sublist, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    二分查找</span></span><br><span class="line"><span class="string">    :param sublist: 有序序列</span></span><br><span class="line"><span class="string">    :param key:  需要查找的值</span></span><br><span class="line"><span class="string">    :return: &gt;= key</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    l, r = <span class="number">0</span>, len(sublist)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        m = l + (r - l - <span class="number">1</span>) // <span class="number">2</span>  <span class="comment"># 选择靠左的值</span></span><br><span class="line">        <span class="keyword">if</span> sublist[m] &gt;= key:</span><br><span class="line">            <span class="comment"># 在等于的情况下,考虑重复元素,要依旧在左侧寻找key,因此设置右界限为m</span></span><br><span class="line">            r = m</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>曾经以为二分查找算法非常简单，但通过深入学习优秀的源码，以及自己动手，才发现并没有想象中的那么简单，想要写出优雅的算法代码，确实是需要多思考多动手的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/uncategorized/hello-world"/>
      <url>/uncategorized/hello-world</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
